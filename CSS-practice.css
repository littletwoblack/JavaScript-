/*
练习说明：请照着代码后面敲，然后删除，退出时候不做保存。这就是一个万用水字毛笔字帖。
*/


/*css的基本语法:选择器+css声明操作*/
p
{
font-size: 20px;
background-color: rgb(93, 214, 119);
color: #000458;
border-color: rgb(116, 231, 206);
}
/*css样式的优先级*/
/*
多重样式将层叠为一个

样式表允许以多种方式规定样式信息。样式可以规定在单个的 HTML 元素中，在 HTML 页的头元素中，或在一个外部的 CSS 文件中。
甚至可以在同一个 HTML 文档内部引用多个外部样式表。

层叠次序
当同一个 HTML 元素被不止一个样式定义时，会使用哪个样式呢？
一般而言，所有的样式会根据下面的规则层叠于一个新的虚拟样式表中
1.内联样式：写在HTML元素标签里面的,一般只在某元素只显示一次的特殊样式设置中使用
2.内部样式：写在head中的style里面的，一般用来调整某页面的一些区别于通用样式的特殊设置。
3.外部样式：外部的.css文件，一般用来设置通用样式
4.浏览器中的样式声明：前3样都缺省设置
*/




/*id选择器和类选择器*/
#id-name { }
.class-name{ }
p.class-name{ }
p .class-name #id-name 选择器n {   }
/*Grouping Selectors 分组选择器*/
h1,h2,p 
{ 
color:green; 
}
/*嵌套选择器*/
.marked p 
{ 
color:white; 
}
#redP p span em {    
    /* 权值 = 100+1+1+1=103 */    
    color:#FF0;/*黄色*/    
    }  

/*
 CSS 组合选择符

CSS 组合选择符可以让你直观的明白选择器与选择器之间的关系。
在 CSS3 中包含了四种组合方式:
后代选取器(以空格分隔)
子元素选择器(以大于号分隔）
相邻兄弟选择器（以加号分隔）
普通兄弟选择器（以波浪号分隔）
*/
div p  { }/*选取div后代元素中的p*/
div>p  { }/*只选取div子元素中的p，只选儿子不选孙子*/
div+p  { }/*相邻兄弟选择器（Adjacent sibling selector）可选择紧接在另一元素后的元素，且二者有相同父元素。
            如果需要选择紧接在另一个元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟选择器（Adjacent
             sibling selector）。*/
div~p  { }/*选取了div之后所有相邻的p，注意，div之后，意思div内包括的p不被选中*/




/*引入 link和@import的区别*/
/*link除了引入css外，还可以定义其他的东西例如rel，而@import只能引入css*/
/*加载顺序不一样，link是随着浏览器和页面一起加载，import是等载入完成以后再加载，网速慢的时候会暂时无样式*/
/*
 <link  rel="stylesheet" type="text/css" href="CSS-practice.css">
 @import url(CSS-practice.css)
*/



/*
CSS 背景

CSS 背景属性用于定义HTML元素的背景。
CSS 属性定义背景效果：
background-color       背景色
background-image       背景图
background-repeat      设置背景图的重复平铺，可以设置在repeat-x水平重复，可设置在repeat-y垂直重复，可以设置不重复等。
background-attachment  设置背景图固定还是滚动，fixed或者scroll，默认是scroll。
background-position    改变图像在背景中的位置  center,top,buttom,left,right或百分比或长度值（以左上角为原点）
*/

body
{   background-color: aquamarine;
    background-image: url();
    background-repeat: repeat-x;
    background-position: right top;
    background-attachment: fixed;
}
/*简写*/
body {background:#ffffff url('img_tree.png') no-repeat right top;}



/*
CSS Text(文本)
可改变颜色、字符间距、对齐文本、装饰文本、对文本进行缩进等等
color             颜色
text-align        文本对齐方式，left或right或justify。
text-decoration   文本修饰，下划线underline或line-through删除线或颜色等。
text-transform    文本转换，大小写uppercase lowercase，首字母大写capitalize等
text-indent       文本缩进，30px，20em
word-spacing      单词间距。每个单词之间间隔距离。
*/

h1
{  color: bisque;
   text-align: justify;
   text-decoration: underline;
   text-transform: lowercase;
   text-indent: 20px;
   word-spacing: 10px;
}

/*
CSS字体Font
CSS字体属性定义字体，加粗，大小，文字样式。
font-family    设置文本的字体系列，即一个系列可设置好几个字体，如果浏览器不支持第一种字体，
               就会自动跳到下一种。超过一个单词的字体要加“”。
font-style     主要是用于指定斜体文字的字体样式属性。这个属性有三个值：
               normal正常 - 正常显示文本,italic斜体 - 以斜体字显示的文字,oblique倾斜的文字 - 文字向一边倾斜（和斜体非常类似，但不太支持）
font-size      设置文本大小。

*/

p
{
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
    font-style: italic;
    font-size: 18px;
}

/*
CSS链接link

链接的样式，可以用任何CSS属性（如颜色，字体，背景等）。
特别的链接，可以有不同的样式，这取决于他们是什么状态。
这四个链接状态是：
a:link - 正常，未访问过的链接
a:visited - 用户已访问过的链接
a:hover - 当用户鼠标放在链接上时
a:active - 链接被点击的那一刻
*/
/*a:link等是一种伪类的写法，CSS伪类是用来添加一些选择器的特殊效果。*/

a:link{color: aqua;
       text-decoration: underline;
       background-color: #fff;
       }
a:visited{color: aquamarine;
          text-decoration:line-through;
          background-color: black;
}
a:hover{  }
a:active{  }

/*
CSS 伪类(Pseudo-classes)   CSS 伪元素
CSS伪类是用来添加一些选择器的特殊效果。
由于状态的变化是非静态的，所以元素达到一个特定状态时，它可能得到一个伪类的样式；当状态改变时，它又会失去这个样式。
由此可以看出，它的功能和class有些类似，但它是基于文档之外的抽象，所以叫伪类。 
:visited - 用户已访问过的链接
:first-child     该伪类来选择元素的第一个子元素
:first-letter	 p:first-letter	选择每个<p> 元素的第一个字母
:first-line    	 p:first-line	选择每个<p> 元素的第一行
:focus	         input:focus	选择元素输入后具有焦点
:before	         p:before	在每个<p>元素之前插入内容
:after	         p:after	在每个<p>元素之后插入内容
:lang(language)	 p:lang(it)	为<p>元素的lang属性选择一个开始值
*/

a.red:visited {color:#FF0000;}       
/*   <a class="red" href="css-syntax.html">CSS Syntax</a>    */

p:first-child 
{ 
color:blue; 
}   /*
    <body> 
    <p>会被选中的文本</p> 
    <p>不会被选中的文本</p> 
    </body> 
    */
p>i:first-child
{
    color: #FF0000
}   /*选中p元素的子元素i中的第一个孩子*/
p:first-child  i { }/*选中第一个p中的i*/
p.class-name::first-line { }
h1:after
{
    content: url(example.gif)
}/*在每个h1后面都插入示例图片*/


/*
CSS列表
使用CSS，可以列出进一步的样式，并可用图像作列表项标记
list-style-type         设置列表前面的圈圈或者数字。none：不使用项目符号 disc：实心圆 circle：空心圆 square：实心方块
                        demical：阿拉伯数字 lower-alpha：小写英文字母 upper-alpha：大写英文字母
                        lower-roman：小写罗马数字 upper-roman：大写罗马数字
list-style-position     设置圈圈等标志在列表里面或者外面，看起来有点像缩进。inside或outside。
list-style-image        设置列表标记项的小图标。就是列表前面的圈圈数字之类的，可以设置为小图像。
*/

ul.a{list-style-type: circle}
ul.b{list-style-type: disc}
ol.c{list-style-type: lower-greek}
ol.d{list-style-type: decimal;
     list-style-position: outside;
     list-style-image: url()}
/*简写*/
ol.d{list-style: square url()}


/*
CSS表格
使用css可以大大提高表格的美观程度
border                   设置边框  1px   solid  black
border-collapse          设置边框是折叠在一起还是分开，感觉能让设置了边框的效果无效掉，踏缩为一条线。
width                    宽度
height                   高度
text-align               表格中文本的水平居中left或right或center
vertical-align           垂直居中。
padding                  设置td或者th的空格大小。
*/

table,th,td 
{border: #FF0  1px solid ;
 /*border-collapse:collapse;*/
 width: 100%;
 height:300px;
 text-align: center;
 vertical-align: bottom;
}
td,th
{
    padding: 5em;
}

/*
CSS 盒子模型(Box Model)

所有HTML元素可以看作盒子，在CSS中，"box model"这一术语是用来设计和布局时使用。
CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。
盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。
Margin（外边距）    - 清除边框区域。Margin没有背景颜色，它是完全透明
Border（边框）      - 边框周围的填充和内容。边框是受到盒子的背景颜色影响
Padding（内边距）   - 清除内容周围的区域。会受到框中填充的背景颜色影响
Content（内容）     - 盒子的内容，显示文本和图像
*/

div.class-name
{
    margin: 10px;
    margin-right: 20px;
    border: 2px;
    border-bottom-color: #FF0;
    padding: 10px;
    padding-top: 11px;
    width: 220px;
    height: 300px;
    
}

/*
边框样式属性指定要显示什么样的边界。
border-style       属性用来定义边框的样式。none: 默认无边框 dotted: 定义一个点线框 dashed: 定义一个虚线框
                   solid: 定义实线边界 double: 定义两个边界。 两个边界的宽度和border-width的值相同
                   groove: 定义3D沟槽边界。效果取决于边界的颜色值 ridge: 定义3D脊边界。效果取决于边界的颜色值
                   inset:定义一个3D的嵌入边框。效果取决于边界的颜色值 outset: 定义一个3D突出边框。 效果取决于边界的颜色值
border-width       指定边框的宽度
border-top-style   可以单独设置顶部
border-left-color  可以单独设置左边
*/
p.class-name
{
    border-style: dashed;
    border-width: 5px;
    border-color: aquamarine;
    border-left-color: aqua;
    border-bottom-color: aquamarine;
    border-top-style: dotted;
}
/*简写*/
p.class-name
{
    border: #000458 7px solid;
}
/*
outline  是border周围的一条线，可以突出显示元素。

*/
p.class-name
{
    outline-color: red;
    outline-style: dotted;
    outline-width: 2px;
}

/*
Margin

margin清除周围的元素（外边框）的区域。margin没有背景颜色，是完全透明的
margin可以单独改变元素的上，下，左，右边距。也可以一次改变所有的属性。
margin     auto或56%或50px等。
*/
p.class-name
{
    margin: 65px;
    margin-bottom: 20px;
    padding:25px 50px 75px 100px;/*上  右  下  左*/
}

/*
CSS Display(显示) 与 Visibility（可见性）

CSS display 属性和 visibility属性都可以用来隐藏某个元素，但是这两个属性有不同的定义,display隐藏后元素不占用
页面空间，但是visibility隐藏的元素只是不可见而已，仍然占用页面空间，会影响页面布局。
*/
h1.class-name
{
    display: none;
}
h2.class-name
{
    visibility: hidden;
}
/*display还可以使用块级元素和内联元素相互转化*/
li{display: inline;}/*li元素本来是要单独占用一行的，inline后就可以让好几个li在同一行了*/
span{display:block}/*span本来是内联的，现在单独占用一行，是块级元素*/




/*
CSS Positioning(定位)

CSS position 属性，允许您将布局的一部分与另一部分重叠，还可以完成多年来通常需要使用多个表格才能完成的任务。
CSS定位属性允许你为一个元素定位。它也可以将一个元素放在另一个元素后面，并指定一个元素的内容太大时，应该发生什么。
元素可以使用的顶部，底部，左侧和右侧属性定位。然而，这些属性无法工作，除非事先设定position属性。他们也有不同的工作
方式，这取决于定位方法.
有四种不同的定位方法。
position     static默认我静态，fixed元素的位置相对于浏览器窗口是固定位置，即使窗口是滚动的它也不会移动。
             Relative 相对定位元素的定位是相对其正常位置。Absolute 定位绝对定位的元素的位置相对于最近的
             已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<html>
z-index      属性指定了一个元素的堆叠顺序（哪个元素应该放在前面，或后面）一个元素可以有正数或负数的堆叠顺序
*/
p.class-name-fixed
{
    position: fixed;
    top: 30px;
    right: 5px;
}

p.class-name-relative
{
    position: relative;
    left: -20px;
}

p.class-name-absolute
{
    position: absolute;
    left: 150px;
    top:100px;
    z-index: -1;/*堆叠在最底层*/
}


/*
CSS Float(浮动)

CSS float 属性定义元素在哪个方向浮动，浮动元素会生成一个块级框，直到该块级框的外边缘碰到包含框或者其他的浮动框为止。
Float     会使元素向左或向右移动，其周围的元素也会重新排列。Float（浮动），往往是用于图像，但它在布局时一样非常有用
clear     属性指定元素两侧不能出现浮动元素。

*/

img
{
    float: right;
}
h1
{
    clear: both;/*h1将单独占据一行，h1两边都不会再有浮动元素*/
}


/*
CSS 水平对齐(Horizontal Align)
<h1><p><div>等块元素对齐，可设置   margin：auto
可对元素中的文本设置text-align：center

*/
h1
{
    margin: auto;
    width: 70%;
    background-color: aquamarine;
}

span
{
    text-align: center
}
 
p
{
    display: flex;
    align-items: center;
    justify-content: center;
}/*css3的写法*/







/*CSS 导航栏

熟练使用导航栏，对于任何网站都非常重要。
使用CSS你可以转换成好看的导航栏而不是枯燥的HTML菜单。
导航栏=链接列表

作为标准的HTML基础一个导航栏是必须的。
在我们的例子中我们将建立一个标准的HTML列表导航栏。
导航条基本上是一个链接列表，所以使用 <ul> 和 <li> 元素非常有意义
*/
/*
<ul> 
<li><a href="default.asp">Home</a></li> 
<li><a href="news.asp">News</a></li> 
<li><a href="contact.asp">Contact</a></li> 
<li><a href="about.asp">About</a></li> 
</ul> 
*/
ul 
{ 
list-style-type:none; 
margin:0; 
padding:0; 
}
a
{
display:block;
width:60px;
background-color:#dddddd;
}
/*例子解析：
list-style-type:none - 移除列表前小标志。一个导航栏并不需要列表标记
移除浏览器的默认设置将边距和填充设置为0
上面的例子中的代码是垂直和水平导航栏使用的标准代码。
示例说明：
display:block - 显示块元素的链接，让整体变为可点击链接区域（不只是文本），它允许我们指定宽度
width:60px - 块元素默认情况下是最大宽度。我们要指定一个60像素的宽度
*/

/*水平导航栏

有两种方法创建横向导航栏。使用内联或浮动的列表项。
这两种方法都很好，但如果你想链接到具有相同的大小，你必须使用浮动的方法。

*/
li
{
    display: inline
}

/*浮动方法*/
li
{
    float: left;
}
a
{
    display:block;
    width: 600px;
}/*实例解析：
float:left - 使用浮动块元素的幻灯片彼此相邻
display:block - 显示块元素的链接，让整体变为可点击链接区域（不只是文本），它允许我们指定宽度
width:60px - 块元素默认情况下是最大宽度。我们要指定一个60像素的宽度
display:inline; -默认情况下，
元素是块元素。在这里，我们删除换行符之前和之后每个列表项，以显示一行 。*/




/*
CSS 下拉菜单

使用 CSS 创建一个鼠标移动上去后显示下拉菜单的效果。
*/
/*
<html>
<head>

  <title>下拉菜单实例|W3Cschool教程(w3cschool.cn)</title>
  <meta charset="utf-8">
  <style>
*/
  .dropdown {
      position: relative;
      display: inline-block;
  }

  .dropdown-content {
      display: none;
      position: absolute;
      background-color: #f9f9f9;
      min-width: 160px;
      box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
      padding: 12px 16px;
  }

  .dropdown:hover .dropdown-content {
      display: block;
  }


  /*总结就是：主要是设置先选中，然后设置display为none或者block，就能隐藏和显示了。*/

/*
  </style>
</head>
<body>

<h2>鼠标移动后出现下拉菜单</h2>
<p>将鼠标移动到指定元素上就能看到下拉菜单。</p>

<div class="dropdown">
  <span>鼠标移动到我这！</span>
  <div class="dropdown-content">
    <p>W3Cschool教程</p>
    <p>www.w3cschool.cn</p>
  </div>
</div>

</body>
</html>
*/




/*
CSS 图片廊
可以使用CSS创建图片廊
*/



/*
CSS 图像透明/不透明

opacity    使用CSS很容易创建透明的图像。
注意：CSS Opacity属性是W3C的CSS3建议的一部分。
*/
img
{
    opacity: 0.4;
    filter:alpha(opacity=40);/* For IE8 and earlier */
}
img:hover
{
    opacity: 1.0;
    filter:alpha(opacity=100);/* For IE8 and earlier */
}


/*
CSS 图像拼合技术

图像拼合就是单个图像的集合。
有许多图像的网页可能需要很长的时间来加载和生成多个服务器的请求。
使用图像拼合会降低服务器的请求数量，并节省带宽。
图像拼合 - 简单实例

与其使用三个独立的图像，不如我们使用这种单个图像（"img_navsprites.gif"）：
navigation images
有了CSS，我们可以只显示我们需要的图像的一部分。
*/
#navlist{position:relative;}
#navlist li{margin:0;padding:0;list-style:none;position:absolute;top:0;}
#navlist li, #navlist a{height:44px;display:block;}

#home{left:0px;width:46px;}
#home{background:url('/statics/images/course/img_navsprites.gif') 0 0;}

#prev{left:63px;width:43px;}
#prev{background:url('/statics/images/course/img_navsprites.gif') -47px 0;}

#next{left:129px;width:43px;}
#next{background:url('/statics/images/course/img_navsprites.gif') -91px 0;}
/*
<ul id="navlist">
  <li id="home"><a href="http://www.w3cschool.cn/css"></a></li>
  <li id="prev"><a href="http://www.w3cschool.cn/css"></a></li>
  <li id="next"><a href="http://www.w3cschool.cn/css"></a></li>
</ul>

实例解析：
#navlist{position:relative;} - 位置设置相对定位，让里面的绝对定位
#navlist li{margin:0;padding:0;list-style:none;position:absolute;top:0;} - margin和padding设置为0，列表样式被删除，所有列表项是绝对定位
#navlist li, #navlist a{height:44px;display:block;} - 所有图像的高度是44px
现在开始每个具体部分的定位和样式：
#home{left:0px;width:46px;} - 定位到最左边的方式，以及图像的宽度是46px
#home{background:url(img_navsprites.gif) 0 0;} - 定义背景图像和它的位置（左0px，顶部0px）
#prev{left:63px;width:43px;} - 左外边距定位63px（＃home宽46px+项目之间的一些多余的空间），宽度为43px。
#prev{background:url('img_navsprites.gif') -47px 0;} - 定义背景图像向右侧定位47px（＃home宽46px+分隔线的1px）
#next{left:129px;width:43px;}- 左外边距定位129px(#prev 63px + #prev宽是43px + 剩余的空间), 宽度是43px.
#next{background:url('img_navsprites.gif') no-repeat -91px 0;} - 定义背景图像向右侧定位91px（＃home 46px+1px的分割线+＃prev宽43px+1px的分隔线）

*/


/*
CSS 媒体类型

媒体类型允许你指定文件将如何在不同媒体呈现。该文件可以以不同的方式显示在屏幕上，在纸张上，或听觉浏览器等等。 
某些 CSS 属性仅仅被设计为针对某些媒介。比方说 "voice-family" 属性被设计为针对听觉用户终端。其他一些属性可用于不同的媒体类型。例如，"font-size"属性可用于屏幕和印刷媒体，但有不同的值。屏幕和纸上的文件不同，通常需要一个更大的字体，sans - serif字体比较适合在屏幕上阅读，而serif字体更容易在纸上阅读。
*/
@media screen   /*用于电脑显示器*/
{
    p.class-name{ font-family: Verdana, Geneva, Tahoma, sans-serif}
}
@media print    /*用于打印机*/
{
    p.class-name{ font-family: 'Times New Roman', Times, serif}
}
@media screen,print
{
    p.class-name{ font-weight: bolder;}
}
@media all { }   /*用于所有媒体设备*/


/* body默认的背景图*/ 
body { 
    background-image: url('img_smallflower.jpg'); 
} 

/* 使用媒体查询，设置当屏幕大于400px时，更换另一张背景图 */ 
@media only screen and (min-width: 400px) { 
    body { 
        background-image: url('img_flowers.jpg'); 
    } 
}





/*
CSS 属性 选择器

顾名思义，CSS 属性选择器就是指可以根据元素的属性以及属性值来选择元素。 
具有特定属性的HTML元素样式

具有特定属性的HTML元素样式不仅仅是class和id。
注意：IE7和IE8需声明!DOCTYPE才支持属性选择器！IE6和更低的版本不支持属性选择器。
属性选择器

下面的例子是把包含标题（title）的所有元素变为蓝色：
<body>
<h2>Will apply to:</h2>
<h1 title="Hello world">Hello world</h1>
<a title="w3cschool" href="http://w3cschool.cn">w3cschool</a>
<hr>
<h2>Will not apply to:</h2>
<p>Hello!</p>
</body>
*/

[title]
{
    color:blue;
}

/*
属性和值选择器

下面的实例改变了标题title='w3cschool'元素的边框样式:
*/
[title=w3cschool]
{
   border: 5px solid  blue;
}
/*
属性和值的选择器 - 多值

下面是包含指定值的title属性的元素样式的例子,即约等于，只要包含目标字符串就可以了，使用（~）分隔属性和值:
包含指定值的lang属性的元素样式的例子，使用（|）分隔属性和值:
表单样式：属性选择器样式无需使用class或id的形式:
*/
[title~=hello]
{
    color:blue;
}
[lang |=en]
{
    color: aquamarine;
}
input[type="text"]
{
    width: 150px;
    display: block;
    margin-bottom: 50px;
    background-color: yellow;
}
input[type="button"]
{
    background-color: green
    
}
